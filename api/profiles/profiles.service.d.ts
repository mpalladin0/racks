import { Model } from 'mongoose';
import { UpdateProfileDto } from './dto/update-profile.dto';
import { Profile, ProfileDocument } from './schemas/profile.schema';
export declare class ProfilesService {
    private profileModel;
    constructor(profileModel: Model<ProfileDocument>);
    create(createProfileDto: any): Promise<import("mongoose").Document<unknown, any, ProfileDocument> & Profile & Document & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    findAll(): string;
    findOne(userId: string): Promise<{
        _id: import("mongoose").Types.ObjectId;
        __v?: any;
        id?: any;
        normalize: import("mongoose").FlattenMaps<() => void>;
        firstname: string;
        lastname: string;
        dob: string;
        close: import("mongoose").FlattenMaps<() => void>;
        ownerDocument: import("mongoose").FlattenMaps<import("mongoose").LeanDocument<unknown>>[][];
        clear: import("mongoose").FlattenMaps<() => void>;
        URL: string;
        alinkColor: string;
        all: import("mongoose").FlattenMaps<HTMLAllCollection>;
        anchors: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLAnchorElement>>;
        applets: import("mongoose").FlattenMaps<HTMLCollection>;
        bgColor: string;
        body: import("mongoose").FlattenMaps<HTMLElement>;
        characterSet: string;
        charset: string;
        compatMode: string;
        contentType: string;
        cookie: string;
        currentScript: import("mongoose").FlattenMaps<HTMLOrSVGScriptElement>;
        defaultView: import("mongoose").FlattenMaps<Window & typeof globalThis>;
        designMode: string;
        dir: string;
        doctype: import("mongoose").FlattenMaps<DocumentType>;
        documentElement: import("mongoose").FlattenMaps<HTMLElement>;
        documentURI: string;
        domain: string;
        embeds: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLEmbedElement>>;
        fgColor: string;
        forms: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLFormElement>>;
        fullscreen: boolean;
        fullscreenEnabled: boolean;
        head: import("mongoose").FlattenMaps<HTMLHeadElement>;
        hidden: boolean;
        images: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLImageElement>>;
        implementation: import("mongoose").FlattenMaps<DOMImplementation>;
        inputEncoding: string;
        lastModified: string;
        linkColor: string;
        links: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>>;
        location: import("mongoose").FlattenMaps<Location>;
        onfullscreenchange: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        onfullscreenerror: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        onpointerlockchange: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        onpointerlockerror: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        onreadystatechange: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        onvisibilitychange: import("mongoose").FlattenMaps<(this: Document, ev: Event) => any>;
        pictureInPictureEnabled: boolean;
        plugins: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLEmbedElement>>;
        readyState: DocumentReadyState;
        referrer: string;
        rootElement: import("mongoose").FlattenMaps<SVGSVGElement>;
        scripts: import("mongoose").FlattenMaps<HTMLCollectionOf<HTMLScriptElement>>;
        scrollingElement: import("mongoose").FlattenMaps<Element>;
        timeline: import("mongoose").FlattenMaps<DocumentTimeline>;
        title: string;
        visibilityState: VisibilityState;
        vlinkColor: string;
        adoptNode: import("mongoose").FlattenMaps<(<T extends Node>(node: T) => T)>;
        captureEvents: import("mongoose").FlattenMaps<() => void>;
        caretRangeFromPoint: import("mongoose").FlattenMaps<(x: number, y: number) => Range>;
        createAttribute: import("mongoose").FlattenMaps<(localName: string) => Attr>;
        createAttributeNS: import("mongoose").FlattenMaps<(namespace: string, qualifiedName: string) => Attr>;
        createCDATASection: import("mongoose").FlattenMaps<(data: string) => CDATASection>;
        createComment: import("mongoose").FlattenMaps<(data: string) => Comment>;
        createDocumentFragment: import("mongoose").FlattenMaps<() => DocumentFragment>;
        createElement: import("mongoose").FlattenMaps<{
            <K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
            <K_1 extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K_1, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K_1];
            (tagName: string, options?: ElementCreationOptions): HTMLElement;
        }>;
        createElementNS: import("mongoose").FlattenMaps<{
            (namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
            <K_2 extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K_2): SVGElementTagNameMap[K_2];
            (namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
            (namespaceURI: string, qualifiedName: string, options?: ElementCreationOptions): Element;
            (namespace: string, qualifiedName: string, options?: string | ElementCreationOptions): Element;
        }>;
        createEvent: import("mongoose").FlattenMaps<{
            (eventInterface: "AnimationEvent"): AnimationEvent;
            (eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
            (eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
            (eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
            (eventInterface: "BlobEvent"): BlobEvent;
            (eventInterface: "ClipboardEvent"): ClipboardEvent;
            (eventInterface: "CloseEvent"): CloseEvent;
            (eventInterface: "CompositionEvent"): CompositionEvent;
            (eventInterface: "CustomEvent"): CustomEvent<any>;
            (eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
            (eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
            (eventInterface: "DragEvent"): DragEvent;
            (eventInterface: "ErrorEvent"): ErrorEvent;
            (eventInterface: "FocusEvent"): FocusEvent;
            (eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
            (eventInterface: "FormDataEvent"): FormDataEvent;
            (eventInterface: "GamepadEvent"): GamepadEvent;
            (eventInterface: "HashChangeEvent"): HashChangeEvent;
            (eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
            (eventInterface: "InputEvent"): InputEvent;
            (eventInterface: "KeyboardEvent"): KeyboardEvent;
            (eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
            (eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
            (eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
            (eventInterface: "MediaRecorderErrorEvent"): MediaRecorderErrorEvent;
            (eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
            (eventInterface: "MessageEvent"): MessageEvent<any>;
            (eventInterface: "MouseEvent"): MouseEvent;
            (eventInterface: "MouseEvents"): MouseEvent;
            (eventInterface: "MutationEvent"): MutationEvent;
            (eventInterface: "MutationEvents"): MutationEvent;
            (eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
            (eventInterface: "PageTransitionEvent"): PageTransitionEvent;
            (eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
            (eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
            (eventInterface: "PointerEvent"): PointerEvent;
            (eventInterface: "PopStateEvent"): PopStateEvent;
            (eventInterface: "ProgressEvent"): ProgressEvent<EventTarget>;
            (eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
            (eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
            (eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
            (eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
            (eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
            (eventInterface: "RTCTrackEvent"): RTCTrackEvent;
            (eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
            (eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
            (eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
            (eventInterface: "StorageEvent"): StorageEvent;
            (eventInterface: "SubmitEvent"): SubmitEvent;
            (eventInterface: "TouchEvent"): TouchEvent;
            (eventInterface: "TrackEvent"): TrackEvent;
            (eventInterface: "TransitionEvent"): TransitionEvent;
            (eventInterface: "UIEvent"): UIEvent;
            (eventInterface: "UIEvents"): UIEvent;
            (eventInterface: "WebGLContextEvent"): WebGLContextEvent;
            (eventInterface: "WheelEvent"): WheelEvent;
            (eventInterface: string): Event;
        }>;
        createNodeIterator: import("mongoose").FlattenMaps<(root: Node, whatToShow?: number, filter?: NodeFilter) => NodeIterator>;
        createProcessingInstruction: import("mongoose").FlattenMaps<(target: string, data: string) => ProcessingInstruction>;
        createRange: import("mongoose").FlattenMaps<() => Range>;
        createTextNode: import("mongoose").FlattenMaps<(data: string) => Text>;
        createTreeWalker: import("mongoose").FlattenMaps<(root: Node, whatToShow?: number, filter?: NodeFilter) => TreeWalker>;
        elementFromPoint: import("mongoose").FlattenMaps<(x: number, y: number) => Element>;
        elementsFromPoint: import("mongoose").FlattenMaps<(x: number, y: number) => Element[]>;
        execCommand: import("mongoose").FlattenMaps<(commandId: string, showUI?: boolean, value?: string) => boolean>;
        exitFullscreen: import("mongoose").FlattenMaps<() => Promise<void>>;
        exitPictureInPicture: import("mongoose").FlattenMaps<() => Promise<void>>;
        exitPointerLock: import("mongoose").FlattenMaps<() => void>;
        getElementById: import("mongoose").FlattenMaps<(elementId: string) => HTMLElement>;
        getElementsByClassName: import("mongoose").FlattenMaps<(classNames: string) => HTMLCollectionOf<Element>>;
        getElementsByName: import("mongoose").FlattenMaps<(elementName: string) => NodeListOf<HTMLElement>>;
        getElementsByTagName: import("mongoose").FlattenMaps<{
            <K_3 extends keyof HTMLElementTagNameMap>(qualifiedName: K_3): HTMLCollectionOf<HTMLElementTagNameMap[K_3]>;
            <K_4 extends keyof SVGElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<SVGElementTagNameMap[K_4]>;
            (qualifiedName: string): HTMLCollectionOf<Element>;
        }>;
        getElementsByTagNameNS: import("mongoose").FlattenMaps<{
            (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            (namespace: string, localName: string): HTMLCollectionOf<Element>;
        }>;
        getSelection: import("mongoose").FlattenMaps<() => Selection>;
        hasFocus: import("mongoose").FlattenMaps<() => boolean>;
        hasStorageAccess: import("mongoose").FlattenMaps<() => Promise<boolean>>;
        importNode: import("mongoose").FlattenMaps<(<T_1 extends Node>(node: T_1, deep?: boolean) => T_1)>;
        open: import("mongoose").FlattenMaps<{
            (unused1?: string, unused2?: string): Document;
            (url: string | URL, name: string, features: string): Window;
        }>;
        queryCommandEnabled: import("mongoose").FlattenMaps<(commandId: string) => boolean>;
        queryCommandIndeterm: import("mongoose").FlattenMaps<(commandId: string) => boolean>;
        queryCommandState: import("mongoose").FlattenMaps<(commandId: string) => boolean>;
        queryCommandSupported: import("mongoose").FlattenMaps<(commandId: string) => boolean>;
        queryCommandValue: import("mongoose").FlattenMaps<(commandId: string) => string>;
        releaseEvents: import("mongoose").FlattenMaps<() => void>;
        requestStorageAccess: import("mongoose").FlattenMaps<() => Promise<void>>;
        write: import("mongoose").FlattenMaps<(...text: string[]) => void>;
        writeln: import("mongoose").FlattenMaps<(...text: string[]) => void>;
        addEventListener: import("mongoose").FlattenMaps<{
            <K_5 extends keyof DocumentEventMap>(type: K_5, listener: (this: Document, ev: DocumentEventMap[K_5]) => any, options?: boolean | AddEventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        }>;
        removeEventListener: import("mongoose").FlattenMaps<{
            <K_6 extends keyof DocumentEventMap>(type: K_6, listener: (this: Document, ev: DocumentEventMap[K_6]) => any, options?: boolean | EventListenerOptions): void;
            (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        }>;
        baseURI: string;
        childNodes: import("mongoose").FlattenMaps<NodeListOf<ChildNode>>;
        firstChild: import("mongoose").FlattenMaps<ChildNode>;
        isConnected: boolean;
        lastChild: import("mongoose").FlattenMaps<ChildNode>;
        nextSibling: import("mongoose").FlattenMaps<ChildNode>;
        nodeName: string;
        nodeType: number;
        nodeValue: string;
        parentElement: import("mongoose").FlattenMaps<HTMLElement>;
        parentNode: import("mongoose").FlattenMaps<ParentNode>;
        previousSibling: import("mongoose").FlattenMaps<ChildNode>;
        textContent: string;
        appendChild: import("mongoose").FlattenMaps<(<T_2 extends Node>(node: T_2) => T_2)>;
        cloneNode: import("mongoose").FlattenMaps<(deep?: boolean) => Node>;
        compareDocumentPosition: import("mongoose").FlattenMaps<(other: Node) => number>;
        contains: import("mongoose").FlattenMaps<(other: Node) => boolean>;
        getRootNode: import("mongoose").FlattenMaps<(options?: GetRootNodeOptions) => Node>;
        hasChildNodes: import("mongoose").FlattenMaps<() => boolean>;
        insertBefore: import("mongoose").FlattenMaps<(<T_3 extends Node>(node: T_3, child: Node) => T_3)>;
        isDefaultNamespace: import("mongoose").FlattenMaps<(namespace: string) => boolean>;
        isEqualNode: import("mongoose").FlattenMaps<(otherNode: Node) => boolean>;
        isSameNode: import("mongoose").FlattenMaps<(otherNode: Node) => boolean>;
        lookupNamespaceURI: import("mongoose").FlattenMaps<(prefix: string) => string>;
        lookupPrefix: import("mongoose").FlattenMaps<(namespace: string) => string>;
        removeChild: import("mongoose").FlattenMaps<(<T_4 extends Node>(child: T_4) => T_4)>;
        replaceChild: import("mongoose").FlattenMaps<(<T_5 extends Node>(node: Node, child: T_5) => T_5)>;
        ATTRIBUTE_NODE: number;
        CDATA_SECTION_NODE: number;
        COMMENT_NODE: number;
        DOCUMENT_FRAGMENT_NODE: number;
        DOCUMENT_NODE: number;
        DOCUMENT_POSITION_CONTAINED_BY: number;
        DOCUMENT_POSITION_CONTAINS: number;
        DOCUMENT_POSITION_DISCONNECTED: number;
        DOCUMENT_POSITION_FOLLOWING: number;
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        DOCUMENT_POSITION_PRECEDING: number;
        DOCUMENT_TYPE_NODE: number;
        ELEMENT_NODE: number;
        ENTITY_NODE: number;
        ENTITY_REFERENCE_NODE: number;
        NOTATION_NODE: number;
        PROCESSING_INSTRUCTION_NODE: number;
        TEXT_NODE: number;
        dispatchEvent: import("mongoose").FlattenMaps<(event: Event) => boolean>;
        oncopy: import("mongoose").FlattenMaps<(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any>;
        oncut: import("mongoose").FlattenMaps<(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any>;
        onpaste: import("mongoose").FlattenMaps<(this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any>;
        activeElement: import("mongoose").FlattenMaps<Element>;
        fullscreenElement: import("mongoose").FlattenMaps<Element>;
        pictureInPictureElement: import("mongoose").FlattenMaps<Element>;
        pointerLockElement: import("mongoose").FlattenMaps<Element>;
        styleSheets: import("mongoose").FlattenMaps<StyleSheetList>;
        getAnimations: import("mongoose").FlattenMaps<() => Animation[]>;
        fonts: import("mongoose").FlattenMaps<FontFaceSet>;
        onabort: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: UIEvent) => any>;
        onanimationcancel: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: AnimationEvent) => any>;
        onanimationend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: AnimationEvent) => any>;
        onanimationiteration: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: AnimationEvent) => any>;
        onanimationstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: AnimationEvent) => any>;
        onauxclick: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onblur: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: FocusEvent) => any>;
        oncanplay: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        oncanplaythrough: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onchange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onclick: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onclose: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        oncontextmenu: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        oncuechange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        ondblclick: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        ondrag: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondragend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondragenter: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondragleave: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondragover: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondragstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondrop: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: DragEvent) => any>;
        ondurationchange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onemptied: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onended: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onerror: import("mongoose").FlattenMaps<OnErrorEventHandlerNonNull>;
        onfocus: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: FocusEvent) => any>;
        onformdata: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: FormDataEvent) => any>;
        ongotpointercapture: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        oninput: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        oninvalid: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onkeydown: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: KeyboardEvent) => any>;
        onkeypress: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: KeyboardEvent) => any>;
        onkeyup: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: KeyboardEvent) => any>;
        onload: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onloadeddata: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onloadedmetadata: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onloadstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onlostpointercapture: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onmousedown: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmouseenter: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmouseleave: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmousemove: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmouseout: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmouseover: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onmouseup: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: MouseEvent) => any>;
        onpause: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onplay: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onplaying: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onpointercancel: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerdown: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerenter: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerleave: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointermove: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerout: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerover: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onpointerup: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: PointerEvent) => any>;
        onprogress: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any>;
        onratechange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onreset: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onresize: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: UIEvent) => any>;
        onscroll: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onseeked: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onseeking: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onselect: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onselectionchange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onselectstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onstalled: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onsubmit: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onsuspend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        ontimeupdate: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        ontoggle: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        ontouchcancel?: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TouchEvent) => any>;
        ontouchend?: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TouchEvent) => any>;
        ontouchmove?: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TouchEvent) => any>;
        ontouchstart?: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TouchEvent) => any>;
        ontransitioncancel: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TransitionEvent) => any>;
        ontransitionend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TransitionEvent) => any>;
        ontransitionrun: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TransitionEvent) => any>;
        ontransitionstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: TransitionEvent) => any>;
        onvolumechange: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwaiting: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwebkitanimationend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwebkitanimationiteration: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwebkitanimationstart: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwebkittransitionend: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: Event) => any>;
        onwheel: import("mongoose").FlattenMaps<(this: GlobalEventHandlers, ev: WheelEvent) => any>;
        childElementCount: number;
        children: import("mongoose").FlattenMaps<HTMLCollection>;
        firstElementChild: import("mongoose").FlattenMaps<Element>;
        lastElementChild: import("mongoose").FlattenMaps<Element>;
        append: import("mongoose").FlattenMaps<(...nodes: (string | Node)[]) => void>;
        prepend: import("mongoose").FlattenMaps<(...nodes: (string | Node)[]) => void>;
        querySelector: import("mongoose").FlattenMaps<{
            <K_7 extends keyof HTMLElementTagNameMap>(selectors: K_7): HTMLElementTagNameMap[K_7];
            <K_8 extends keyof SVGElementTagNameMap>(selectors: K_8): SVGElementTagNameMap[K_8];
            <E extends Element = Element>(selectors: string): E;
        }>;
        querySelectorAll: import("mongoose").FlattenMaps<{
            <K_9 extends keyof HTMLElementTagNameMap>(selectors: K_9): NodeListOf<HTMLElementTagNameMap[K_9]>;
            <K_10 extends keyof SVGElementTagNameMap>(selectors: K_10): NodeListOf<SVGElementTagNameMap[K_10]>;
            <E_1 extends Element = Element>(selectors: string): NodeListOf<E_1>;
        }>;
        replaceChildren: import("mongoose").FlattenMaps<(...nodes: (string | Node)[]) => void>;
        createExpression: import("mongoose").FlattenMaps<(expression: string, resolver?: XPathNSResolver) => XPathExpression>;
        createNSResolver: import("mongoose").FlattenMaps<(nodeResolver: Node) => XPathNSResolver>;
        evaluate: import("mongoose").FlattenMaps<(expression: string, contextNode: Node, resolver?: XPathNSResolver, type?: number, result?: XPathResult) => XPathResult>;
    }>;
    update(id: number, updateProfileDto: UpdateProfileDto): string;
    remove(id: number): string;
}
